// Mixins to let elements behave in a grid-like way. That means that there's
// at least some sort of row+column system. Further details depend on
// implementation.
//
// The grid is complicated as hell, but luckily the fine folks at Yahoo have
// figured out how to do it properly. It's hacky and complicated, but well, ok.
// https://github.com/yahoo/pure/blob/0833fe802cff8b905a0ab1b99afb9f0cf8f52568/src/grids/css/grids-core.css

// 1. Collapse white-space between columns
// 2. The 'gotta catch em all' font-stack: all browsers have one of these fonts
@mixin row($valign: top, $halign: left, $wrap: true) {
    flex-wrap: if($wrap == true, wrap, nowrap);
    text-rendering: optimizeSpeed;
    letter-spacing: -0.31em; // [1]
    font-family: 'FreeSans', 'Arimo', 'Droid Sans', 'Helvetica', sans-serif; // [2]

    .flexbox & {
        display: flex;
    }

    // Take care of vertical alignment of columns/childnodes
    @if $valign == top {
        align-items: flex-start;
    }
    @if $valign == middle {
        align-items: center;
    }
    @if $valign == bottom {
        align-items: flex-end;
    }
    @if $valign == stretch {
        align-items: stretch;
    }

    // Left, center, right, justify contents
    @if $halign == left {
        justify-content: flex-start;
        text-align: left;
    }
    @if $halign == center {
        justify-content: center;
        text-align: center;
    }
    @if $halign == right {
        justify-content: flex-end;
        text-align: right;
    }
    @if $halign == justify {
        justify-content: space-between;
        text-align: justify;

        &::after {
            content: ' ';
            display: inline-block;
            width: 100%;
        }
    }
}

@mixin col {
    display: inline-block;
    vertical-align: top;
    text-align: left;
    text-rendering: auto;
    letter-spacing: normal;
    font-family: map-get($brand-face, family);
}
